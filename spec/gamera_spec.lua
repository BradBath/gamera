require 'spec.fake-love'

local gamera = require 'gamera'

describe('gamera', function()
  before_each(function()
    gamera.reset()
  end)

  describe('world', function()
    it('requires that l,t,w,h are numbers, and w,h are positive', function()
      assert.error(function() gamera.setWorld() end)
      assert.error(function() gamera.setWorld(0) end)
      assert.error(function() gamera.setWorld(0,0) end)
      assert.error(function() gamera.setWorld(0,0,1) end)
      assert.error(function() gamera.setWorld(0,0,-1,1) end)
      assert.error(function() gamera.setWorld(0,0,-1,-1) end)
      assert.Not.error(function() gamera.setWorld(-10,-10,20,20) end)
    end)
    it('can be set and read', function()
      gamera.setWorld(0,0,2000,3000)
      assert.same({0,0,2000,3000}, {gamera.getWorld()})
    end)
  end)

  describe('window', function()
    it('requires that l,t,w,h are numbers, and w,h are positive', function()
      assert.error(function() gamera.setWindow() end)
      assert.error(function() gamera.setWindow(0) end)
      assert.error(function() gamera.setWindow(0,0) end)
      assert.error(function() gamera.setWindow(0,0,1) end)
      assert.error(function() gamera.setWindow(0,0,-1,1) end)
      assert.error(function() gamera.setWindow(0,0,-1,-1) end)
      assert.Not.error(function() gamera.setWindow(-10,-10,20,20) end)
    end)
    it('defaults to the dimensions of the screen (using love)', function()
      assert.same({0,0,800,600}, {gamera.getWindow()})
    end)
    it('can be set and read', function()
      gamera.setWindow(0,0,2000,3000)
      assert.same({0,0,2000,3000}, {gamera.getWindow()})
    end)
    it('defines the visible area', function()
      gamera.setWorld(0,0,1000,1000)
      gamera.setWindow(100,100,300,400)
      gamera.setPosition(150,200)
      assert.same({0,0,300,400}, {gamera.getVisible()})
    end)
  end)

  describe('position', function()
    before_each(function()
      gamera.setWorld(0,0,1000,1000)
      gamera.setWindow(0,0,100,100)
    end)

    it('requires two numbers', function()
      assert.error(function() gamera.setPosition() end)
      assert.error(function() gamera.setPosition('foo') end)
      assert.error(function() gamera.setPosition(1) end)
      assert.Not.error(function() gamera.setPosition(1,0) end)
    end)

    it('defaults to the middle of the window', function()
      assert.same({400,300}, {gamera.getPosition()})
    end)

    it('can be set and read', function()
      gamera.setPosition(500,400)
      assert.same({500,400}, {gamera.getPosition()})
    end)

    it('modifies the visible area', function()
      gamera.setPosition(200,300)
      assert.same({150,250,100,100}, {gamera.getVisible()})
    end)

    it('is clamped by the world and window dimensions', function()
      gamera.setPosition(200,200)
      assert.same({200,200}, {gamera.getPosition()})

      gamera.setPosition(0,200)
      assert.same({50,200}, {gamera.getPosition()})

      gamera.setPosition(200,0)
      assert.same({200, 50}, {gamera.getPosition()})

      gamera.setPosition(1000,200)
      assert.same({950,200}, {gamera.getPosition()})

      gamera.setPosition(200,1000)
      assert.same({200,950}, {gamera.getPosition()})
    end)
  end)

  describe("scale", function()
    before_each(function()
      gamera.setWorld(0,0,1000,1000)
      gamera.setWindow(0,0,100,100)
      gamera.setPosition(500,400)
    end)

    it("defaults to 1.0,1.0", function()
      assert.same({1,1}, {gamera.getScale()})
    end)

    it('requires at least one positive number', function()
      assert.error(function() gamera.setScale() end)
      assert.error(function() gamera.setScale('foo') end)
      assert.error(function() gamera.setScale(0) end)
      assert.error(function() gamera.setScale(-1) end)
      assert.Not.error(function() gamera.setScale(1) end)
      assert.Not.error(function() gamera.setScale(1,1) end)
      assert.error(function() gamera.setScale(1,-1) end)
    end)

    it('can be set and read with 1 or 2 parameters', function()
      gamera.setScale(2)
      assert.same({2,2}, {gamera.getScale()})

      gamera.setScale(3,4)
      assert.same({3,4}, {gamera.getScale()})
    end)

    it('modifies the visible area', function()
      gamera.setScale(2)
      assert.same({475,375,50,50}, {gamera.getVisible()})

      gamera.setScale(0.5)
      assert.same({400,300,200,200}, {gamera.getVisible()})
    end)

    it('clamps positioning', function()
      gamera.setPosition(200,1000)
      assert.same({200,950}, {gamera.getPosition()})

      gamera.setScale(0.5)
      assert.same({200,900}, {gamera.getPosition()})
    end)

    it('hits its limit when windowsize=worldsize', function()
      gamera.setScale(0.00001,1)
      assert.same({0.1, 1}, {gamera.getScale()}) -- world=1000,win=100.

      gamera.setScale(1,0.000001)
      assert.same({1, 0.1}, {gamera.getScale()}) -- world=1000,win=100.
    end)
  end)

  describe(".draw", function()
    before_each(function()
      gamera.setWorld(0,0,1000,1000)
      gamera.setWindow(10,10,200,100)
      gamera.setPosition(0,0)
    end)

    it("sets the scissors according to the window", function()
      spy.on(love.graphics, "setScissor")
      gamera.draw(function() end)
      assert.spy(love.graphics.setScissor).was_called_with(10,10,200,100)
      assert.spy(love.graphics.setScissor).was_called_with()
    end)

    it("translates the initial drawing to contrarrest the window left top coordinates", function()
      spy.on(love.graphics, "push")
      spy.on(love.graphics, "translate")
      spy.on(love.graphics, "pop")
      gamera.draw(function() end)
      assert.spy(love.graphics.push).was_called()
      assert.spy(love.graphics.translate).was_called_with(10,10)
      assert.spy(love.graphics.pop).was_called()
    end)

    it("passes the visible area to the callback", function()
      local dummy = {}
      dummy.f = function() end
      spy.on(dummy, 'f')
      gamera.draw(dummy.f)
      assert.spy(dummy.f).was_called_with(0,0,200,100)
    end)

    it("moves when the position moves", function()
      gamera.setPosition(400,200)
      spy.on(love.graphics, "translate")
      gamera.draw(function() end)
      assert.spy(love.graphics.translate).was_called_with(-300,-150)
    end)

    it("scales as expected", function()
      gamera.setScale(0.5)
      spy.on(love.graphics, "scale")
      gamera.draw(function() end)
      assert.spy(love.graphics.scale).was_called_with(0.5, 0.5)
    end)
  end)
end)
